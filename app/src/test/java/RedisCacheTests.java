/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.IOException;
import java.net.URISyntaxException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import redis.resp.cache.ExpirationPolicy;
import redis.resp.cache.ExpireIn;
import redis.resp.cache.RedisCache;
import redis.resp.commands.RespCommandException;
import redis.resp.types.RespNull;
import redis.resp.types.RespSimpleString;

class RedisCacheTests {

    private RedisCache cache;

    @BeforeEach
    void setup() {
        cache = new RedisCache();
    }

    @Test
    void set_NOttl_neverexpire() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"));

        // Act
        var never = cache.neverExpire("test");

        // Assert
        assertEquals(true, never);
    }

    @Test
    void set_30sttl_willexpire() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(30));

        // Act
        var willExpire = cache.willExpireIn("test", ExpireIn.seconds(31));

        // Assert
        assertEquals(true, willExpire);
    }

    @Test
    void willNotIn30_60ttl_willNotexpire() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(60));

        // Act
        var willExpire = cache.willExpireIn("test", ExpireIn.seconds(30));

        // Assert
        assertEquals(false, willExpire);
    }

    @Test
    void setIfNotExists_empty_isAllowed() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        // Act
        var result = cache.set("test", new RespSimpleString("always"), ExpirationPolicy.SET_IF_NOT_EXISTS);

        // Assert
        assertNotEquals(RespNull.NULL, result);
    }

    @Test
    void setIfExists_value_isAllowed() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpirationPolicy.NONE);
        // Act
        var result = cache.set("test", new RespSimpleString("always"), ExpirationPolicy.SET_IF_EXISTS);

        // Assert
        assertNotEquals(RespNull.NULL, result);
    }

    @Test
    void setIfExists_empty_isNotAllowedAndNull() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        // Act
        var result = cache.set("test", new RespSimpleString("always"), ExpirationPolicy.SET_IF_EXISTS);

        // Assert
        assertEquals(RespNull.NULL, result);
    }

    @Test
    void setIfNotExists_value_isNotAllowedAndNull() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpirationPolicy.NONE);

        // Act
        var result = cache.set("test", new RespSimpleString("always"), ExpirationPolicy.SET_IF_NOT_EXISTS);

        // Assert
        assertEquals(RespNull.NULL, result);
    }

    @Test
    void set_minus30sttl_willexpire() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(-30));

        // Act
        var isExpired = cache.isExpired("test");

        // Assert
        assertEquals(true, isExpired);
    }

    @Test
    void set_2sttl_willexpire() throws URISyntaxException, IOException, RespCommandException, InterruptedException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(2));
        Thread.sleep(3000);

        // Act
        var isExpired = cache.isExpired("test");

        // Assert
        assertEquals(true, isExpired);
    }

    @Test
    void set_30sttlAndKeepAfter2_willexpireIn30()
            throws URISyntaxException, IOException, RespCommandException, InterruptedException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(30));
        Thread.sleep(2000);
        cache.set("test", new RespSimpleString("always"), ExpirationPolicy.KEEP_TTL);

        // Act
        // now it should be still valid in 29s but not valid in 30s
        var isExpired1 = cache.willExpireIn("test", ExpireIn.seconds(29));
        var isExpired2 = cache.willExpireIn("test", ExpireIn.seconds(31));

        // Assert
        assertEquals(false, isExpired1);
        assertEquals(true, isExpired2);
    }

    @Test
    void set_30sttlAndNoKeepAfter2_willexpireIn()
            throws URISyntaxException, IOException, RespCommandException, InterruptedException {

        // Arrange
        cache.set("test", new RespSimpleString("always"), ExpireIn.seconds(30));
        Thread.sleep(2000);
        cache.set("test", new RespSimpleString("always"), ExpirationPolicy.NONE);

        // Act
        // now it should be still valid in 29s but not valid in 30s
        var isExpired1 = cache.willExpireIn("test", ExpireIn.seconds(29));
        var isExpired2 = cache.willExpireIn("test", ExpireIn.seconds(31));

        // Assert
        assertEquals(true, isExpired1);
        assertEquals(true, isExpired2);
    }
}
