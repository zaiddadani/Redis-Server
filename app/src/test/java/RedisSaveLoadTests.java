/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import redis.resp.cache.RedisCache;
import redis.resp.commands.RespCommandException;
import redis.resp.types.RespSimpleString;

class RedisSaveLoadTests {

    private RedisCache cache;
    private File tmpFile;

    @BeforeEach
    void setup() {
        cache = new RedisCache();
    }

    @AfterEach
    void deleteTmpFileIfNeeded() {
        if (tmpFile != null && tmpFile.exists()) {
            tmpFile.delete();
            System.out.println("File deleted " + tmpFile.getAbsolutePath());
        }
    }

    @Test
    void save_empty_ok() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        tmpFile = new File(".", UUID.randomUUID() + ".txt");
        var tmpFileName = tmpFile.getAbsolutePath();

        // Act
        cache.save(tmpFileName);

        // Assert
        assertTrue(tmpFile.exists());
    }

    @Test
    void save_1set_ok() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"));
        tmpFile = new File(".", UUID.randomUUID() + ".txt");
        var tmpFileName = tmpFile.getAbsolutePath();

        // Act
        cache.save(tmpFileName);

        // Assert
        assertTrue(tmpFile.exists());
    }

    @Test
    void load_empty_ok() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        tmpFile = new File(".", UUID.randomUUID() + ".txt");
        var tmpFileName = tmpFile.getAbsolutePath();
        cache.save(tmpFileName);

        // Act
        cache.load(tmpFileName);

        // Assert
        assertTrue(tmpFile.exists());
    }

    @Test
    void load_1setAndSave_ok() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        cache.set("test", new RespSimpleString("always"));
        tmpFile = new File(".", UUID.randomUUID() + ".txt");
        var tmpFileName = tmpFile.getAbsolutePath();
        cache.save(tmpFileName);

        // Act
        cache.load(tmpFileName);

        Optional<RespSimpleString> test = cache.get("test");

        // Assert
        assertTrue(test.isPresent());
        assertEquals("always", test.get().value);
    }
}
